{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from \"react\";\nimport { safeHtmlString } from \"../utils/functions\";\n\nvar ContentEditable = function (_super) {\n  __extends(ContentEditable, _super);\n\n  function ContentEditable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.focused = false;\n    _this.removed = false;\n    _this.preFocusedValue = \"\";\n\n    _this.onPaste = function (e) {\n      e.preventDefault();\n      var text = e.clipboardData.getData(\"text/plain\");\n      document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n    };\n\n    _this.onFocus = function () {\n      _this.preFocusedValue = _this.getValue();\n      _this.focused = true;\n    };\n\n    _this.onBlur = function () {\n      _this.focused = false;\n      var ref = _this.props.innerEditableRef.current;\n      var _a = _this.props,\n          validator = _a.validator,\n          change = _a.change;\n\n      if (!_this.removed && ref) {\n        if (ref.innerText === \"\") {\n          _this.props.remove();\n\n          return;\n        }\n\n        if (validator) {\n          var valid = validator(_this.getValue());\n\n          if (!valid) {\n            ref.innerText = _this.preFocusedValue;\n            return;\n          }\n        }\n\n        change(ref.innerText);\n      }\n    };\n\n    _this.onKeyDown = function (e) {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n\n        _this.focusInputRef();\n\n        return;\n      }\n\n      var removeOnBackspace = _this.props.removeOnBackspace;\n\n      var value = _this.getValue();\n\n      if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n        _this.removed = true;\n\n        _this.props.remove();\n\n        _this.focusInputRef();\n\n        return;\n      }\n    };\n\n    _this.getValue = function () {\n      var ref = _this.getRef();\n\n      return ref ? ref.innerText : \"\";\n    };\n\n    _this.getRef = function () {\n      return _this.props.innerEditableRef.current;\n    };\n\n    _this.focusInputRef = function () {\n      var inputRef = _this.props.inputRef;\n\n      if (inputRef && inputRef.current) {\n        inputRef.current.focus();\n      }\n    };\n\n    return _this;\n  }\n\n  ContentEditable.prototype.componentDidMount = function () {\n    this.preFocusedValue = this.getValue();\n  };\n\n  ContentEditable.prototype.render = function () {\n    var _a = this.props,\n        value = _a.value,\n        className = _a.className,\n        innerEditableRef = _a.innerEditableRef;\n    return React.createElement(\"div\", {\n      ref: innerEditableRef,\n      className: className,\n      contentEditable: true,\n      onPaste: this.onPaste,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onKeyDown: this.onKeyDown,\n      dangerouslySetInnerHTML: {\n        __html: safeHtmlString(value)\n      }\n    });\n  };\n\n  return ContentEditable;\n}(React.Component);\n\nexport { ContentEditable };","map":{"version":3,"sources":["../../../src/components/ContentEditable.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {safeHtmlString} from \"../utils/functions\";\n\ninterface Props {\n  value: string;\n  className: string;\n  innerEditableRef: React.RefObject<HTMLDivElement>;\n  inputRef: React.RefObject<HTMLInputElement>;\n  change: (value: string) => void;\n  remove: () => void;\n  validator?: (value: string) => boolean;\n  removeOnBackspace?: boolean;\n}\n\nexport class ContentEditable extends React.Component<Props> {\n\n  // Track focus state of editable tag\n  focused: boolean = false;\n\n  // Track if element has been removed from DOM\n  removed: boolean = false;\n\n  // Save value before input is focused / user starts typing\n  preFocusedValue: string = \"\";\n\n  componentDidMount() {\n    this.preFocusedValue = this.getValue();\n  }\n\n  onPaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\n\n    // Cancel paste event\n    e.preventDefault();\n\n    // Remove formatting from clipboard contents\n    const text = e.clipboardData.getData(\"text/plain\");\n\n    // Insert text manually from paste command\n    document.execCommand(\"insertHTML\", false, safeHtmlString(text));\n\n  }\n\n  onFocus = () => {\n    this.preFocusedValue = this.getValue();\n    this.focused = true;\n  }\n\n  onBlur = () => {\n\n    this.focused = false;\n\n    const ref = this.props.innerEditableRef.current;\n    const { validator, change } = this.props;\n\n    if (!this.removed && ref) {\n\n      // On blur, if no content in tag, remove it\n      if (ref.innerText === \"\") {\n        this.props.remove();\n        return;\n      }\n\n      // Validate input if needed\n      if (validator) {\n        const valid = validator(this.getValue());\n        // If invalidate, switch ref back to pre focused value\n        if (!valid) {\n          ref.innerText = this.preFocusedValue;\n          return;\n        }\n      }\n\n      change(ref.innerText);\n\n    }\n\n  }\n\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n\n    // On enter, focus main tag input\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      this.focusInputRef();\n      return;\n    }\n\n    // On backspace, if no content in ref, remove tag and focus main tag input\n    const { removeOnBackspace } = this.props;\n    const value = this.getValue();\n    if (removeOnBackspace && e.keyCode === 8 && value === \"\") {\n      this.removed = true;\n      this.props.remove();\n      this.focusInputRef();\n      return;\n    }\n\n  }\n\n  getValue = () => {\n    const ref = this.getRef();\n    return ref ? ref.innerText : \"\";\n  }\n\n  getRef = () => {\n    return this.props.innerEditableRef.current;\n  }\n\n  focusInputRef = () => {\n    const { inputRef } = this.props;\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const { value, className, innerEditableRef } = this.props;\n    return (\n      <div\n        ref={innerEditableRef}\n        className={className}\n        contentEditable={true}\n        onPaste={this.onPaste}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onKeyDown={this.onKeyDown}\n        dangerouslySetInnerHTML={{ __html: safeHtmlString(value) }}\n      />\n    );\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}