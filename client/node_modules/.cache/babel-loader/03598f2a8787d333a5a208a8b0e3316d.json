{"ast":null,"code":"import { useState, useCallback, useMemo, cloneElement, useRef, createElement, useEffect, forwardRef } from 'react';\nimport classNames from 'classnames';\nimport mergeRefs from 'react-merge-refs';\nimport { nanoid } from 'nanoid/non-secure';\nconst INDETERMINATE_STATE = 'indeterminate';\n\nconst dispatch = value => state => {\n  if (Array.isArray(state)) {\n    const index = state.indexOf(value);\n\n    if (index === -1) {\n      state.push(value);\n    } else {\n      state.splice(index, 1);\n    }\n\n    return [...state];\n  } else if (value !== '') {\n    return [value];\n  }\n\n  return !state;\n};\n\nconst useCheckboxState = ({\n  state: initialState = false,\n  onChange\n} = {}) => {\n  const [state, setState] = useState(() => {\n    if (typeof initialState === 'string' && initialState !== INDETERMINATE_STATE) {\n      return [initialState];\n    }\n\n    return initialState;\n  });\n  return {\n    state,\n    setState,\n    onChange: useCallback(e => {\n      const {\n        value\n      } = e.currentTarget;\n      setState(dispatch(value));\n\n      if (typeof onChange === 'function') {\n        onChange(e);\n      }\n    }, [onChange])\n  };\n};\n\nconst lockedStyles = {\n  pointerEvents: 'none'\n};\n/**\n * A simplier way to prevent checking when PCR is in locked mode.\n * This is way simplier than controlling the checkbox using\n * event handlers. Supports IE 11+\n */\n\nconst useLocked = ({\n  locked,\n  style\n}) => {\n  if (locked) {\n    return { ...lockedStyles,\n      ...style\n    };\n  }\n\n  return style;\n};\n\nconst useIcon = icon => {\n  return useMemo(() => {\n    if (icon) {\n      let type = 'icon';\n\n      if (icon.type === 'img') {\n        type = 'image';\n      } else if (icon.type === 'svg') {\n        type = 'svg';\n      } // icons that contain `type` substring\n      // won't fail with a word boundary search\n\n\n      const re = new RegExp(`\\\\b${type}\\\\b`);\n      return {\n        iconType: icon.props['data-type'] || type,\n        icon: icon.props.className && !re.test(icon.props.className) ? cloneElement(icon, { ...icon.props,\n          className: classNames(icon.props.className, type)\n        }) : icon\n      };\n    }\n\n    return {};\n  }, [icon]);\n};\n\nconst isDefault = (animation, type) => {\n  if (type) {\n    return false;\n  }\n\n  return !animation || animation === 'smooth' || animation === 'pulse';\n};\n/**\n * Responsible for returning an object used by classnames\n * to properly add the className values to the .pretty element.\n */\n\n\nconst useClassNames = (props, isSwitch) => {\n  const {\n    animation,\n    bigger,\n    locked,\n    plain,\n    shape,\n    variant,\n    iconType,\n    hasFocus\n  } = props;\n  return {\n    'p-default': !isSwitch && isDefault(animation, iconType),\n    'p-bigger': bigger,\n    'p-locked': locked,\n    'p-plain': plain,\n    'p-has-focus': hasFocus,\n    [`p-${animation}`]: animation,\n    [`p-${shape}`]: shape,\n    [`p-${variant}`]: variant,\n    [`p-${iconType}`]: iconType\n  };\n};\n\nconst isBoolean = e => typeof e === 'boolean';\n\nconst isNullish = e => e === null || e === undefined;\n\nconst isIndeterminate = e => e === 'indeterminate';\n/**\n * A generic way to setup controlled components by\n * removing  state hook return results, setting `checked`,\n * and `value` props too.\n */\n\n\nconst useControlled = props => {\n  // remove state and state dispatch from the props\n  // eslint-disable-next-line prefer-const\n  let {\n    checked,\n    state,\n    setState,\n    value,\n    defaultValue,\n    ...rest\n  } = props; // if a dispatcher is used, then we're good to run the rest\n  // of the logic\n\n  if (setState) {\n    // if state is defined and checked is NOT defined\n    // then use state to set the value of checked.\n    if ((isBoolean(state) || isIndeterminate(state)) && !isBoolean(checked) && isNullish(checked)) {\n      checked = !!state;\n    } else if (Array.isArray(state)) {\n      // otherwise set checked true if the value is contained\n      // within the state.\n      checked = state.includes(value);\n    } else if (isNullish(checked)) {\n      // The type is not a boolean and is probably a string.\n      // If you're attempting to use this hook in a different\n      // way, then you should considering controlling the component\n      // yourself. Object.is used here just in case ;)\n      checked = Object.is(state, value);\n    } // preset the value prop in controlled mode to an empty\n    // string to prevent 'on' values. Use the defaultValue\n    // if provided\n\n\n    if (isNullish(value)) {\n      value = defaultValue || '';\n    }\n  }\n\n  return {\n    checked,\n    value,\n    state,\n    ...rest\n  };\n};\n\nconst PREFIX = 'pcr_';\n\nconst useUUID = () => useRef(PREFIX + nanoid(8)).current;\n/**\n * Filters out the noise of prop mayhem with PCR. This separates\n * all props from the native HTML props that will eventually get passed\n * to the input element. Generated PCR UUIDs are created here, unless\n * user has specified one of their own.\n */\n\n\nconst useCommonProps = props => {\n  const defaultId = useUUID();\n  const {\n    locked,\n    color,\n    variant,\n    animation,\n    children,\n    style,\n    id = defaultId,\n    className,\n    bigger,\n    hasFocus,\n    ...rest\n  } = props;\n  return {\n    locked,\n    color,\n    variant,\n    animation,\n    children,\n    id,\n    className,\n    bigger,\n    style,\n    hasFocus,\n    htmlProps: rest\n  };\n};\n/**\n * Responsible for extracting common props for radio and checkbox\n * controls.\n */\n\n\nconst useCheckboxRadioProps = props => {\n  const {\n    shape,\n    plain,\n    icon,\n    indeterminate,\n    hasFocus,\n    ...rest\n  } = props;\n  return {\n    shape,\n    plain,\n    icon,\n    indeterminate,\n    ...useCommonProps(rest)\n  };\n};\n/**\n * A tiny component to abstract away pretty-checkbox \"state\" div.\n * Shared by all components.\n */\n\n\nconst State = ({\n  color,\n  icon,\n  id,\n  children,\n  ...rest\n}) => {\n  return createElement(\"div\", Object.assign({\n    className: classNames('state', color && `p-${color}`)\n  }, rest), icon, createElement(\"label\", {\n    htmlFor: id\n  }, children));\n};\n\nState.displayName = 'State';\n\nconst useIndeterminate = ({\n  checked,\n  state,\n  indeterminate: indeterminateFromProps\n}) => {\n  const [indeterminate, setStatus] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    if (state !== undefined && ref.current) {\n      setStatus(state === 'indeterminate');\n    }\n  }, [state]); // if a prop is passed mark the indeterminate state\n  // we should check to ensure state isn't set to indeterminate\n  // since we don't want ot clobber the state value if\n  // it is defined.\n\n  useEffect(() => {\n    if (state !== 'indeterminate' && ref.current && typeof indeterminateFromProps !== 'undefined') {\n      ref.current.checked = indeterminateFromProps; // fix needs to come from pretty-checkbox\n      // ref.current.indeterminate = indeterminateFromProps;\n\n      setStatus(indeterminateFromProps);\n    }\n  }, [indeterminateFromProps, state]);\n  return {\n    ref,\n    'aria-checked': indeterminate ? 'mixed' : checked\n  };\n};\n\nconst Checkbox = forwardRef((props, ref) => {\n  const {\n    checked,\n    value,\n    state,\n    ...rest\n  } = useControlled(props);\n  const {\n    children,\n    locked,\n    color,\n    id,\n    className,\n    style,\n    indeterminate,\n    icon: propsIcon,\n    htmlProps\n  } = useCheckboxRadioProps(rest);\n  const {\n    ref: intRef,\n    ...aria\n  } = useIndeterminate({\n    state,\n    checked,\n    indeterminate\n  });\n  const styles = useLocked({\n    locked,\n    style\n  });\n  const {\n    icon,\n    iconType\n  } = useIcon(propsIcon);\n  return createElement(\"div\", {\n    style: styles,\n    className: classNames('pretty', useClassNames({ ...props,\n      iconType\n    }), className)\n  }, createElement(\"input\", Object.assign({\n    ref: mergeRefs([ref, intRef]),\n    value: value,\n    type: \"checkbox\",\n    id: id,\n    checked: checked\n  }, aria, htmlProps)), createElement(State, {\n    id: id,\n    icon: icon,\n    color: color\n  }, children));\n});\nCheckbox.displayName = 'Checkbox';\n\nconst useRadioState = ({\n  state: initialState = false,\n  onChange\n} = {}) => {\n  const [state, setState] = useState(initialState);\n  return {\n    state,\n    setState,\n    onChange: useCallback(e => {\n      const {\n        value\n      } = e.currentTarget;\n      setState(current => {\n        if (value !== '') {\n          return value;\n        }\n\n        return !current;\n      });\n\n      if (typeof onChange === 'function') {\n        onChange(e);\n      }\n    }, [onChange])\n  };\n};\n\nconst Radio = forwardRef((props, ref) => {\n  const {\n    checked,\n    value,\n    state,\n    ...rest\n  } = useControlled(props);\n  const {\n    shape = 'round',\n    children,\n    locked,\n    color,\n    id,\n    className,\n    style,\n    icon: propsIcon,\n    htmlProps\n  } = useCheckboxRadioProps(rest);\n  const styles = useLocked({\n    locked,\n    style\n  });\n  const {\n    icon,\n    iconType\n  } = useIcon(propsIcon);\n  return createElement(\"div\", {\n    style: styles,\n    className: classNames('pretty', useClassNames({ ...props,\n      shape,\n      iconType\n    }), className)\n  }, createElement(\"input\", Object.assign({\n    ref: ref,\n    value: value,\n    type: \"radio\",\n    id: id,\n    checked: checked\n  }, htmlProps)), createElement(State, {\n    id: id,\n    icon: icon,\n    color: color\n  }, children));\n});\nRadio.displayName = 'Radio';\n\nconst handler = e => {\n  e.currentTarget.setAttribute('aria-checked', e.currentTarget.checked + '');\n};\n/**\n * A small hook to help manage correct aria-checked state when switch\n * is used as an uncontrolled component. We need this to run\n * for a11y purposes. FOr the `switch` role, `aria-checked` is required.\n */\n\n\nconst useAriaChecked = ({\n  setState,\n  checked\n}) => {\n  const ref = useRef(null);\n  useEffect(() => {\n    const elem = ref.current;\n    let bound = false;\n\n    if (!setState && !checked && elem) {\n      elem.setAttribute('aria-checked', elem.checked + '');\n      elem.addEventListener('change', handler);\n      bound = true;\n    }\n\n    return () => {\n      if (bound && elem) {\n        elem.removeEventListener('change', handler);\n      }\n    };\n  }, [setState, checked]);\n  return ref;\n};\n\nconst Switch = forwardRef((props, ref) => {\n  const {\n    checked,\n    value,\n    state,\n    ...rest\n  } = useControlled(props);\n  const {\n    children,\n    locked,\n    color,\n    id,\n    className,\n    style,\n    htmlProps\n  } = useCommonProps(rest);\n  const styles = useLocked({\n    locked,\n    style\n  });\n  const htmlRef = useAriaChecked({\n    setState: props.setState,\n    checked\n  });\n  return createElement(\"div\", {\n    style: styles,\n    className: classNames('pretty', 'p-switch', useClassNames(props, true), className)\n  }, createElement(\"input\", Object.assign({\n    ref: mergeRefs([ref, htmlRef]),\n    type: \"checkbox\",\n    role: \"switch\",\n    value: value,\n    id: id,\n    \"aria-checked\": checked,\n    checked: checked\n  }, htmlProps)), createElement(State, {\n    id: id,\n    color: color\n  }, children));\n});\nSwitch.displayName = 'Switch';\nexport { Checkbox, Radio, Switch, useCheckboxState, useRadioState };","map":{"version":3,"sources":["../dist-src/components/checkbox/useCheckboxState.js","../dist-src/hooks/utility/useLocked.js","../dist-src/hooks/useIcon.js","../dist-src/hooks/utility/useClassNames.js","../dist-src/hooks/utility/useControlled.js","../dist-src/hooks/useUUID.js","../dist-src/hooks/utility/useCommonProps.js","../dist-src/hooks/utility/useCheckboxRadioProps.js","../dist-src/components/state/State.js","../dist-src/components/checkbox/useIndeterminate.js","../dist-src/components/checkbox/Checkbox.js","../dist-src/components/radio/useRadioState.js","../dist-src/components/radio/Radio.js","../dist-src/components/switch/useAriaChecked.js","../dist-src/components/switch/Switch.js"],"names":["React.useState","React.useCallback","React.useMemo","React.cloneElement","React.useRef","React.createElement","React.useEffect","React.forwardRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nconst INDETERMINATE_STATE = 'indeterminate';\nconst dispatch = (value) => (state) => {\n    if (Array.isArray(state)) {\n        const index = state.indexOf(value);\n        if (index === -1) {\n            state.push(value);\n        }\n        else {\n            state.splice(index, 1);\n        }\n        return [...state];\n    }\n    else if (value !== '') {\n        return [value];\n    }\n    return !state;\n};\nexport const useCheckboxState = ({ state: initialState = false, onChange, } = {}) => {\n    const [state, setState] = React.useState(() => {\n        if (typeof initialState === 'string' && initialState !== INDETERMINATE_STATE) {\n            return [initialState];\n        }\n        return initialState;\n    });\n    return {\n        state,\n        setState,\n        onChange: React.useCallback((e) => {\n            const { value } = e.currentTarget;\n            setState(dispatch(value));\n            if (typeof onChange === 'function') {\n                onChange(e);\n            }\n        }, [onChange]),\n    };\n};\n","const lockedStyles = { pointerEvents: 'none' };\n/**\n * A simplier way to prevent checking when PCR is in locked mode.\n * This is way simplier than controlling the checkbox using\n * event handlers. Supports IE 11+\n */\nexport const useLocked = ({ locked, style }) => {\n    if (locked) {\n        return {\n            ...lockedStyles,\n            ...style,\n        };\n    }\n    return style;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nexport const useIcon = (icon) => {\n    return React.useMemo(() => {\n        if (icon) {\n            let type = 'icon';\n            if (icon.type === 'img') {\n                type = 'image';\n            }\n            else if (icon.type === 'svg') {\n                type = 'svg';\n            }\n            // icons that contain `type` substring\n            // won't fail with a word boundary search\n            const re = new RegExp(`\\\\b${type}\\\\b`);\n            return {\n                iconType: icon.props['data-type'] || type,\n                icon: icon.props.className && !re.test(icon.props.className)\n                    ? React.cloneElement(icon, {\n                        ...icon.props,\n                        className: classNames(icon.props.className, type),\n                    })\n                    : icon,\n            };\n        }\n        return {};\n    }, [icon]);\n};\n","const isDefault = (animation, type) => {\n    if (type) {\n        return false;\n    }\n    return !animation || animation === 'smooth' || animation === 'pulse';\n};\n/**\n * Responsible for returning an object used by classnames\n * to properly add the className values to the .pretty element.\n */\nexport const useClassNames = (props, isSwitch) => {\n    const { animation, bigger, locked, plain, shape, variant, iconType, hasFocus } = props;\n    return {\n        'p-default': !isSwitch && isDefault(animation, iconType),\n        'p-bigger': bigger,\n        'p-locked': locked,\n        'p-plain': plain,\n        'p-has-focus': hasFocus,\n        [`p-${animation}`]: animation,\n        [`p-${shape}`]: shape,\n        [`p-${variant}`]: variant,\n        [`p-${iconType}`]: iconType,\n    };\n};\n","const isBoolean = (e) => typeof e === 'boolean';\nconst isNullish = (e) => e === null || e === undefined;\nconst isIndeterminate = (e) => e === 'indeterminate';\n/**\n * A generic way to setup controlled components by\n * removing  state hook return results, setting `checked`,\n * and `value` props too.\n */\nexport const useControlled = (props) => {\n    // remove state and state dispatch from the props\n    // eslint-disable-next-line prefer-const\n    let { checked, state, setState, value, defaultValue, ...rest } = props;\n    // if a dispatcher is used, then we're good to run the rest\n    // of the logic\n    if (setState) {\n        // if state is defined and checked is NOT defined\n        // then use state to set the value of checked.\n        if ((isBoolean(state) || isIndeterminate(state)) &&\n            !isBoolean(checked) &&\n            isNullish(checked)) {\n            checked = !!state;\n        }\n        else if (Array.isArray(state)) {\n            // otherwise set checked true if the value is contained\n            // within the state.\n            checked = state.includes(value);\n        }\n        else if (isNullish(checked)) {\n            // The type is not a boolean and is probably a string.\n            // If you're attempting to use this hook in a different\n            // way, then you should considering controlling the component\n            // yourself. Object.is used here just in case ;)\n            checked = Object.is(state, value);\n        }\n        // preset the value prop in controlled mode to an empty\n        // string to prevent 'on' values. Use the defaultValue\n        // if provided\n        if (isNullish(value)) {\n            value = defaultValue || '';\n        }\n    }\n    return { checked, value, state, ...rest };\n};\n","import * as React from 'react';\nimport { nanoid } from 'nanoid/non-secure';\nconst PREFIX = 'pcr_';\nexport const useUUID = () => React.useRef(PREFIX + nanoid(8)).current;\n","import { useUUID } from '../useUUID';\n/**\n * Filters out the noise of prop mayhem with PCR. This separates\n * all props from the native HTML props that will eventually get passed\n * to the input element. Generated PCR UUIDs are created here, unless\n * user has specified one of their own.\n */\nexport const useCommonProps = (props) => {\n    const defaultId = useUUID();\n    const { locked, color, variant, animation, children, style, id = defaultId, className, bigger, hasFocus, ...rest } = props;\n    return {\n        locked,\n        color,\n        variant,\n        animation,\n        children,\n        id,\n        className,\n        bigger,\n        style,\n        hasFocus,\n        htmlProps: rest,\n    };\n};\n","import { useCommonProps } from './useCommonProps';\n/**\n * Responsible for extracting common props for radio and checkbox\n * controls.\n */\nexport const useCheckboxRadioProps = (props) => {\n    const { shape, plain, icon, indeterminate, hasFocus, ...rest } = props;\n    return { shape, plain, icon, indeterminate, ...useCommonProps(rest) };\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\n/**\n * A tiny component to abstract away pretty-checkbox \"state\" div.\n * Shared by all components.\n */\nexport const State = ({ color, icon, id, children, ...rest }) => {\n    return (React.createElement(\"div\", Object.assign({ className: classNames('state', color && `p-${color}`) }, rest),\n        icon,\n        React.createElement(\"label\", { htmlFor: id }, children)));\n};\nState.displayName = 'State';\n","import * as React from 'react';\nexport const useIndeterminate = ({ checked, state, indeterminate: indeterminateFromProps, }) => {\n    const [indeterminate, setStatus] = React.useState(false);\n    const ref = React.useRef(null);\n    React.useEffect(() => {\n        if (state !== undefined && ref.current) {\n            setStatus(state === 'indeterminate');\n        }\n    }, [state]);\n    // if a prop is passed mark the indeterminate state\n    // we should check to ensure state isn't set to indeterminate\n    // since we don't want ot clobber the state value if\n    // it is defined.\n    React.useEffect(() => {\n        if (state !== 'indeterminate' &&\n            ref.current &&\n            typeof indeterminateFromProps !== 'undefined') {\n            ref.current.checked = indeterminateFromProps;\n            // fix needs to come from pretty-checkbox\n            // ref.current.indeterminate = indeterminateFromProps;\n            setStatus(indeterminateFromProps);\n        }\n    }, [indeterminateFromProps, state]);\n    return {\n        ref,\n        'aria-checked': indeterminate ? 'mixed' : checked,\n    };\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport mergeRefs from 'react-merge-refs';\nimport { useCheckboxState } from './useCheckboxState';\nimport { useLocked } from '../../hooks/utility/useLocked';\nimport { useIcon } from '../../hooks/useIcon';\nimport { useClassNames } from '../../hooks/utility/useClassNames';\nimport { useControlled } from '../../hooks/utility/useControlled';\nimport { useCheckboxRadioProps } from '../../hooks/utility/useCheckboxRadioProps';\nimport { State } from '../state/State';\nimport { useIndeterminate } from './useIndeterminate';\nexport const Checkbox = React.forwardRef((props, ref) => {\n    const { checked, value, state, ...rest } = useControlled(props);\n    const { children, locked, color, id, className, style, indeterminate, icon: propsIcon, htmlProps, } = useCheckboxRadioProps(rest);\n    const { ref: intRef, ...aria } = useIndeterminate({ state, checked, indeterminate });\n    const styles = useLocked({ locked, style });\n    const { icon, iconType } = useIcon(propsIcon);\n    return (React.createElement(\"div\", { style: styles, className: classNames('pretty', useClassNames({\n            ...props,\n            iconType,\n        }), className) },\n        React.createElement(\"input\", Object.assign({ ref: mergeRefs([ref, intRef]), value: value, type: \"checkbox\", id: id, checked: checked }, aria, htmlProps)),\n        React.createElement(State, { id: id, icon: icon, color: color }, children)));\n});\nCheckbox.displayName = 'Checkbox';\nexport { useCheckboxState };\n","import * as React from 'react';\nexport const useRadioState = ({ state: initialState = false, onChange } = {}) => {\n    const [state, setState] = React.useState(initialState);\n    return {\n        state,\n        setState,\n        onChange: React.useCallback((e) => {\n            const { value } = e.currentTarget;\n            setState(current => {\n                if (value !== '') {\n                    return value;\n                }\n                return !current;\n            });\n            if (typeof onChange === 'function') {\n                onChange(e);\n            }\n        }, [onChange]),\n    };\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { State } from '../state/State';\nimport { useLocked } from '../../hooks/utility/useLocked';\nimport { useIcon } from '../../hooks/useIcon';\nimport { useClassNames } from '../../hooks/utility/useClassNames';\nimport { useControlled } from '../../hooks/utility/useControlled';\nimport { useCheckboxRadioProps } from '../../hooks/utility/useCheckboxRadioProps';\nimport { useRadioState } from './useRadioState';\nexport const Radio = React.forwardRef((props, ref) => {\n    const { checked, value, state, ...rest } = useControlled(props);\n    const { shape = 'round', children, locked, color, id, className, style, icon: propsIcon, htmlProps, } = useCheckboxRadioProps(rest);\n    const styles = useLocked({ locked, style });\n    const { icon, iconType } = useIcon(propsIcon);\n    return (React.createElement(\"div\", { style: styles, className: classNames('pretty', useClassNames({\n            ...props,\n            shape,\n            iconType,\n        }), className) },\n        React.createElement(\"input\", Object.assign({ ref: ref, value: value, type: \"radio\", id: id, checked: checked }, htmlProps)),\n        React.createElement(State, { id: id, icon: icon, color: color }, children)));\n});\nRadio.displayName = 'Radio';\nexport { useRadioState };\n","import * as React from 'react';\nconst handler = (e) => {\n    e.currentTarget.setAttribute('aria-checked', e.currentTarget.checked + '');\n};\n/**\n * A small hook to help manage correct aria-checked state when switch\n * is used as an uncontrolled component. We need this to run\n * for a11y purposes. FOr the `switch` role, `aria-checked` is required.\n */\nexport const useAriaChecked = ({ setState, checked }) => {\n    const ref = React.useRef(null);\n    React.useEffect(() => {\n        const elem = ref.current;\n        let bound = false;\n        if (!setState && !checked && elem) {\n            elem.setAttribute('aria-checked', elem.checked + '');\n            elem.addEventListener('change', handler);\n            bound = true;\n        }\n        return () => {\n            if (bound && elem) {\n                elem.removeEventListener('change', handler);\n            }\n        };\n    }, [setState, checked]);\n    return ref;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useClassNames } from '../../hooks/utility/useClassNames';\nimport { useControlled } from '../../hooks/utility/useControlled';\nimport { useLocked } from '../../hooks/utility/useLocked';\nimport { State } from '../state/State';\nimport { useCommonProps } from '../../hooks/utility/useCommonProps';\nimport mergeRefs from 'react-merge-refs';\nimport { useAriaChecked } from './useAriaChecked';\nexport const Switch = React.forwardRef((props, ref) => {\n    const { checked, value, state, ...rest } = useControlled(props);\n    const { children, locked, color, id, className, style, htmlProps } = useCommonProps(rest);\n    const styles = useLocked({ locked, style });\n    const htmlRef = useAriaChecked({ setState: props.setState, checked });\n    return (React.createElement(\"div\", { style: styles, className: classNames('pretty', 'p-switch', useClassNames(props, true), className) },\n        React.createElement(\"input\", Object.assign({ ref: mergeRefs([ref, htmlRef]), type: \"checkbox\", role: \"switch\", value: value, id: id, \"aria-checked\": checked, checked: checked }, htmlProps)),\n        React.createElement(State, { id: id, color: color }, children)));\n});\nSwitch.displayName = 'Switch';\n"]},"metadata":{},"sourceType":"module"}