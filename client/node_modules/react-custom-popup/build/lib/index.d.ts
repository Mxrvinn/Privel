import React from "react";
import { ToastPosition } from "./Toast";
export declare enum AnimationType {
    FADE_IN = "fadeIn",
    FADE_IN_UP = "fadeInUp",
    FLASH = "flash",
    HEART_BEAT = "heartBeat",
    SLIDE_IN_LEFT = "slideInLeft",
    SLIDE_IN_RIGHT = "slideInRight",
    SLIDE_IN_UP = "slideInUp",
    SWING = "swing",
    ZOOM_IN = "zoomIn"
}
export declare enum OutAnimationType {
    FADE_OUT = "fadeOut",
    SLIDE_OUT_LEFT = "slideOutLeft",
    SLIDE_OUT_RIGHT = "slideOutRight",
    SLIDE_OUT_UP = "slideOutUp",
    ZOOM_OUT = "zoomOut"
}
export declare enum DialogType {
    WARNING = "warning",
    INFO = "info",
    DANGER = "danger",
    SUCCESS = "success"
}
export interface OptionDialogButton {
    name: string;
    onClick?: () => void;
    style?: React.CSSProperties;
    type?: 'confirm' | 'cancel';
}
export declare type Message = string;
export declare type ValidationValue = boolean | number | string | Date | RegExp;
export declare type ValidationOption<Value extends ValidationValue = ValidationValue> = ValidationValueMessage<Value>;
export declare type ValidationValueMessage<Value extends ValidationValue = ValidationValue> = {
    value: Value;
    message?: Message;
};
export declare type ValidateResult = Message | boolean | undefined;
export declare type Validate = (data: any) => ValidateResult | Promise<ValidateResult>;
export declare type ValidationOptions = Partial<{
    required: ValidationOption<boolean>;
    min: ValidationOption<number>;
    max: ValidationOption<number>;
    minDate: ValidationOption<Date>;
    maxDate: ValidationOption<Date>;
    maxLength: ValidationOption<number>;
    minLength: ValidationOption<number>;
    pattern: ValidationOption<RegExp>;
    validate: Validate | Record<string, Validate>;
}>;
interface OptionDialogOptions {
    animationType?: AnimationType;
    outAnimationType?: OutAnimationType;
    cancelText?: string;
    confirmText?: string;
    containerStyle?: React.CSSProperties;
    footerStyle?: React.CSSProperties;
    headerStyle?: React.CSSProperties;
    headerTextStyle?: React.CSSProperties;
    onCancel?: () => void;
    onConfirm?: () => void;
    optionButtons?: Array<OptionDialogButton>;
    showCloseButton?: boolean;
    text?: string;
    textStyle?: React.CSSProperties;
    title?: string;
    type?: DialogType;
    bodyComponent?: JSX.Element;
    allowOutsideClick?: boolean;
}
export interface InputProps {
    validation?: ValidationOptions;
    default?: string | Date | number;
    inputType: 'text' | 'file' | 'number' | 'textarea' | 'date' | 'image';
    label?: string;
    name: string;
    placeholder?: string;
}
export interface ImageInputProps extends InputProps {
    inputType: 'image';
    multiple?: boolean;
}
interface InputDialogOptions {
    animationType?: AnimationType;
    outAnimationType?: OutAnimationType;
    cancelText?: string;
    confirmText?: string;
    containerStyle?: React.CSSProperties;
    footerStyle?: React.CSSProperties;
    headerStyle?: React.CSSProperties;
    headerTextStyle?: React.CSSProperties;
    errorMessageStyle?: React.CSSProperties;
    input?: InputProps | ImageInputProps;
    inputs?: Array<InputProps | ImageInputProps>;
    onCancel?: () => void;
    onConfirm?: (result: {
        [key: string]: any;
    }) => void;
    onDismissed?: () => void;
    options?: Array<OptionDialogButton>;
    showCloseButton?: boolean;
    text?: string;
    textStyle?: React.CSSProperties;
    title?: string;
    type?: DialogType;
    allowOutsideClick?: boolean;
}
interface AlertOptions {
    animationType?: AnimationType;
    outAnimationType?: OutAnimationType;
    confirmText?: string;
    containerStyle?: React.CSSProperties;
    footerStyle?: React.CSSProperties;
    headerStyle?: React.CSSProperties;
    headerTextStyle?: React.CSSProperties;
    showCloseButton?: boolean;
    text?: string;
    textStyle?: React.CSSProperties;
    title?: string;
    type?: DialogType;
    bodyComponent?: JSX.Element;
    allowOutsideClick?: boolean;
}
export interface ToastOptions {
    containerStyle?: React.CSSProperties;
    customComponent?: JSX.Element;
    position?: ToastPosition;
    text?: string;
    textStyle?: React.CSSProperties;
    timeoutDuration?: number;
    type: DialogType;
    showCloseButton?: boolean;
}
export declare type IToast = ToastOptions & {
    id: string;
};
export interface ModalOptions {
    animationType?: AnimationType;
    outAnimationType?: OutAnimationType;
    timeoutDuration?: number;
}
interface PopupContext {
    component?: () => JSX.Element;
    componentJSX?: JSX.Element;
    componentProps?: React.ComponentProps<any>;
    toasts?: Array<IToast>;
    showModal: (component: JSX.Element, options?: ModalOptions) => void;
    hideModal: () => void;
    showAlert: (options: AlertOptions) => void;
    hideAlert: () => void;
    showOptionDialog: (options: OptionDialogOptions) => void;
    showInputDialog: (options: InputDialogOptions) => void;
    showToast: (options: ToastOptions) => void;
    hideToast: (toastId: string) => void;
}
declare let ExportedPopupActions: Omit<PopupContext, 'componentProps' | 'component' | 'componentJSX' | 'toasts'>;
declare const ModalConsumer: React.Consumer<PopupContext>;
declare const PopupProvider: ({ children }: {
    children: any;
}) => JSX.Element;
declare const usePopup: () => PopupContext;
export { ModalConsumer, PopupProvider, usePopup, ExportedPopupActions as PopupActions };
